@using TaxClient.Data
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory ClientFactory

<h1>Do you really want to delete selected record?</h1>
<div class="row">
    <input type="button" class="col-sm-3 btn btn-primary mr-3" disabled=@IsLoading @onclick="() => DeleteRecord(true)" value="Yes">
    <input type="button" class="col-sm-3 btn btn-primary" disabled=@IsLoading @onclick="() => DeleteRecord(false)" value="No">
</div>

@code {
    [Parameter]
    public TaxRateData SelectedRow { get; set; }

    [Parameter]
    public EventCallback<TaxRateData> SelectedRowChanged { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public EventCallback<bool> IsLoadingChanged { get; set; }

    private async void DeleteRecord(bool doDelete)
    {
        if (doDelete)
        {
            IsLoading = true;
            await IsLoadingChanged.InvokeAsync(IsLoading);

            var request = new HttpRequestMessage(HttpMethod.Delete,
                $"https://localhost:5002/api/Tax/{SelectedRow.Id}");

            var client = ClientFactory.CreateClient();

            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {

            }
            IsLoading = false;
            await IsLoadingChanged.InvokeAsync(IsLoading);

            SelectedRow = null;
            await SelectedRowChanged.InvokeAsync(SelectedRow);
        }
        else
        {
            SelectedRow = null;
            await SelectedRowChanged.InvokeAsync(SelectedRow);
            this.StateHasChanged();
        }
    }
}
