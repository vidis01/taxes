@page "/getalltaxrates"

@using TaxClient.Data
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory ClientFactory

<EditForm Model="@municipalityName" OnValidSubmit=@ValidFormSubmitted>
    <h1>Get all registered tax rates for municipality</h1>
    <hr />
    <div class="form-group row">
        <label for="municipalityname" class="col-sm-2 col-form-label">Municipality name</label>
        <div class="col-sm-3">
            <InputText required id="municipalityname" class="form-control" disabled=@IsLoading @bind-Value="municipalityName" />
        </div>
    </div>
    <div class="form-group row">
        <input type="submit" class="col-sm-5 btn btn-primary" disabled=@IsLoading value="Get rates">
    </div>

</EditForm>

@if (IsLoading)
{
    <div class="spinner"></div>
}
else if (showMessage)
{
    <h1>Tax rates not found!</h1>
}
else if (rates != null && rates.Any())
{
    <GetAllTaxRatesTable @bind-Rates="rates" @bind-SelectedRow="SelectedRow" @bind-IsLoading="IsLoading" @bind-UpdateSelected="updateSelected" @bind-DeleteSelected="deleteSelected"/>

    @if (updateSelected)
    {
        <UpdateTaxRateForm @bind-SelectedRow="SelectedRow" @bind-IsLoading="IsLoading" />
        
    }
    else if (deleteSelected)
    {
        <DeleteTaxRate @bind-SelectedRow="SelectedRow" @bind-IsLoading="IsLoading"/>
    }
}

@code {
    string municipalityName = "";

    IEnumerable<TaxRateData> rates;

    private bool IsLoading { get; set; }

    bool showMessage;

    bool updateSelected;

    bool deleteSelected;

    private TaxRateData SelectedRow { get; set; }

    private async void ValidFormSubmitted()
    {
        showMessage = false;
        IsLoading = true;
        var request = new HttpRequestMessage(HttpMethod.Get,
        $"https://localhost:5002/api/Tax/{municipalityName}");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using (var responseStream = await response.Content.ReadAsStreamAsync())
            {
                rates = await JsonSerializer.DeserializeAsync<IEnumerable<TaxRateData>>(
                    responseStream, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }

        }
        if (!rates.Any()) showMessage = true;
        IsLoading = false;
        this.StateHasChanged();
    }

}
